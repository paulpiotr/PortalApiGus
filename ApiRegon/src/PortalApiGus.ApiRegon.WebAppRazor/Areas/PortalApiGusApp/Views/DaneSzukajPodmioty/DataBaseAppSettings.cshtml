@using PortalApiGus.ApiRegon.WebAppRazor.Helpers

@model PortalApiGus.ApiRegon.DataBase.Models.AppSettings

@{ ViewData["Title"] = "Portal Api Gus, Api Regon, Ustawienia bazy danych"; }
@{ Layout = "~/Views/Shared/_LayoutAdmin.cshtml"; }

<div class="card bg-info text-white m-0 p-0 align-middle shadow">
    <div class="card-header text-left">
        <i class="ti-settings"></i> @ViewData["Title"]
    </div>
    <div class="card-body bg-white">
        <form class="form-horizontal form-material" action="@Url.Action("DataBaseAppSettings", "DaneSzukajPodmioty", new {Area = "PortalApiGusApp", ReturnUrl = Context.Request.Query["ReturnUrl"]})" method="post">
            @Html.AntiForgeryToken()
            <div class="form-group has-danger">
                <div class="col-sm-12 mt-2">
                    @if (null != Model && Model.CacheLifeTime >= 0)
                    {
                        @Html.LabelFor(m => m.CacheLifeTime, new { Class = "control-label text-success" })
                    }
                    @Html.TextBoxFor(m => m.CacheLifeTime, new { Class = "form-control" })
                    <div class="form-control-feedback mt-2">
                        @Html.ValidationMessageFor(m => m.CacheLifeTime)
                    </div>
                </div>
                <div class="col-sm-12 mt-2">
                    @if (null != Model && null != Model.ConnectionString && !string.IsNullOrWhiteSpace(Model.ConnectionString))
                    {
                        @Html.LabelFor(m => m.ConnectionString, new { Class = "control-label text-success" })
                        ;
                    }
                    @Html.TextAreaFor(m => m.ConnectionString, new { Class = "form-control m-1", Style = "min-height: 4rem" })
                    @if (null != Model && null != Model.ConnectionString && !string.IsNullOrWhiteSpace(Model.ConnectionString))
                    {
                        <div class="text-black-50 font-italic m-t-0 m-b-5 accordion">
                            @if (Model.ConnectionString.Length > 512)
                            {
                                <div>
                                    <button type="button" class="btn btn-sm btn-link text-black-50 text-decoration-none" data-toggle="collapse" data-target="#collapseOne"><i class="ti-angle-down"></i> Wartość połączenia zaszyfrowana</button>
                                </div>
                                <div id="collapseOne" class="collapse p-l-10">
                                    <p>
                                        <small>@Model.ConnectionString</small>
                                    </p>
                                </div>
                            }
                            <div>
                                <button type="button" class="btn btn-sm btn-link text-black-50 text-decoration-none" data-toggle="collapse" data-target="#collapseTwo"><i class="ti-angle-down"></i> Wartość połączenia po tłumaczeniu zmiennych</button>
                            </div>
                            <div id="collapseTwo" class="collapse p-l-10">
                                <p>
                                    <small>@Model.GetConnectionString()</small>
                                </p>
                            </div>
                        </div>
                    }
                    <div class="form-control-feedback mt-2">
                        @Html.ValidationMessageFor(m => m.ConnectionString)
                    </div>
                </div>
                <div class="col-sm-12 mt-2">
                    <div class="checkbox text-success mt-2">
                        <label>@Html.CheckBoxFor(m => m.CheckForConnection, new { Class = "checkbox checkbox-success" }) @Html.DisplayNameFor(m => m.CheckForConnection)</label>
                    </div>
                </div>
                <div class="col-sm-12 mt-2">
                    <div class="checkbox text-success mt-2">
                        <label>@Html.CheckBoxFor(m => m.CheckAndMigrate, new { Class = "checkbox checkbox-success" }) @Html.DisplayNameFor(m => m.CheckAndMigrate)</label>
                    </div>
                </div>
                <div class="col-sm-12 mt-2">
                    <div class="checkbox text-success mt-2">
                        <label>@Html.CheckBoxFor(m => m.UseGlobalDatabaseConnectionSettings, new { Class = "checkbox checkbox-success" }) @Html.DisplayNameFor(m => m.UseGlobalDatabaseConnectionSettings)</label>
                    </div>
                </div>
                <div class="col-sm-12 mt-2">
                    @if (null != Model)
                    {
                        <div class="text-black-50 font-italic m-t-10 m-b-10">
                            <small>Bieżąca ścieżka do pliku konfiguracji: @Model.GetFilePath()</small>
                        </div>
                    }
                </div>
            </div>
            <div class="row justify-content-center mt-3">
                <div class="form-group align-self text-center">
                    <div class="col-sm-12 align-self-center align-items-center">
                        <button class="btn btn-block btn-lg btn-info btn-rounded" type="submit" title="Zapisz ustawienia i zrestartuj aplikację. Wykonam restart usługi lub serwera IIS." data-toggle="tooltip" data-placement="top"><i class="ti-save"></i> Zapisz<span class="d-none d-md-inline"> ustawienia</span></button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@Html.Script(
    @<script type="text/javascript">
         $(function() {
             try {
                 var useGlobalDatabaseConnectionSettings = @(null != Model && Model.UseGlobalDatabaseConnectionSettings ? 1 : 0);
                 var displayNameForUseGlobalDatabaseConnectionSettings = "@Html.DisplayNameFor(m => m.UseGlobalDatabaseConnectionSettings)";
                 $("#ConnectionString").val(String.raw`@Html.Raw(Model.RsaProviderService.DecryptWithPublicKey(Model.AesIVProviderService.Decpypt(Model.ConnectionString, Model.RsaProviderService.AsymmetricPublicKeyAsString)))`);
                 if (useGlobalDatabaseConnectionSettings == 1) {
                     $("#ConnectionString").prop("readonly", true);
                     $("label[for='ConnectionString']").append($("<span> obecna konfiguracja nie udostępnia edycji połączenia do bazy danych, odznacz \"" + displayNameForUseGlobalDatabaseConnectionSettings + "\" i zapisz aby edytować wartość!</span>").addClass("control-label text-warning font-italic"));
                 }
             } catch (e) {
                 console.log(e);
             }
         });
    </script>
)